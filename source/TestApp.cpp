/*!
 * \file
 * Scanline edge-flag algorithm for antialiasing <br>
 * Copyright (c) 2005-2007 Kiia Kallio
 *
 * http://mlab.uiah.fi/~kkallio/antialiasing/
 * 
 * This code is distributed under the three-clause BSD license.
 * Read the LICENSE file or visit the URL above for details.
 *
 * \brief Test application for the algorithm. Uses SDL.
 *
 *
 * $Id: $
 * $Date: $
 * $Revision: $
 */


#include "platform/System.h"
#include "polygon/base/Base.h"
#include "polygon/test/Test.h"
#include "polygon/implementation/Implementation.h"
#include "SDL.h"
#include "TestApp.h"

#define GLOBAL_SCALE 2
#define WINDOW_WIDTH (320*GLOBAL_SCALE)
#define WINDOW_HEIGHT (240*GLOBAL_SCALE)

#define STANDARD_TEST
// #define QUALITY_TEST
// #define SQUARE_TEST
// #define QT_POLYGON_TEST // Enable also "INCLUDE_QT_DATA" define in TestPattern.c!

// Toggles on creation of dumps of tests (SVG files and polygonal data files)
#define CREATE_DUMPS false

// Tests will be run with all implementations (note that some tests with early implementations
// take very long).
// #define TEST_ALL_VERSIONS

// Toggles on saving of bitmaps.
// #define SAVE_BITMAPS

// Toggles on saving of results.
// #define SAVE_RESULTS

// Defines the svg path
#define SVG_PATH "../../SVG/"

// Font data defines characters [0,0xff],but has control data for
// entries [0,0x20] and [0x7f,0xa0]. Each character cell is 8x16 pixels,
// i.e. 16 bytes.
static const unsigned char gFontData[189*16] =
{
    0x00,0x00,0x00,0x00,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x00,0x08,0x08,0x00,0x00,
    0x00,0x00,0x22,0x22,0x22,0x22,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x12,0x12,0x12,0x7E,0x24,0x24,0x7E,0x48,0x48,0x48,0x00,0x00,
    0x00,0x00,0x00,0x00,0x08,0x3E,0x49,0x48,0x38,0x0E,0x09,0x49,0x3E,0x08,0x00,0x00,
    0x00,0x00,0x00,0x00,0x31,0x4A,0x4A,0x34,0x08,0x08,0x16,0x29,0x29,0x46,0x00,0x00,
    0x00,0x00,0x00,0x00,0x1C,0x22,0x22,0x22,0x1C,0x39,0x45,0x42,0x46,0x39,0x00,0x00,
    0x00,0x00,0x08,0x08,0x08,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x04,0x08,0x08,0x10,0x10,0x10,0x10,0x10,0x10,0x08,0x08,0x04,0x00,
    0x00,0x00,0x00,0x20,0x10,0x10,0x08,0x08,0x08,0x08,0x08,0x08,0x10,0x10,0x20,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x49,0x2A,0x1C,0x2A,0x49,0x08,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x08,0x08,0x7F,0x08,0x08,0x08,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x08,0x08,0x10,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7E,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x18,0x00,0x00,
    0x00,0x00,0x00,0x00,0x02,0x02,0x04,0x08,0x08,0x10,0x10,0x20,0x40,0x40,0x00,0x00,
    0x00,0x00,0x00,0x00,0x18,0x24,0x42,0x42,0x42,0x42,0x42,0x42,0x24,0x18,0x00,0x00,
    0x00,0x00,0x00,0x00,0x08,0x18,0x28,0x08,0x08,0x08,0x08,0x08,0x08,0x3E,0x00,0x00,
    0x00,0x00,0x00,0x00,0x3C,0x42,0x42,0x02,0x0C,0x10,0x20,0x40,0x40,0x7E,0x00,0x00,
    0x00,0x00,0x00,0x00,0x3C,0x42,0x42,0x02,0x1C,0x02,0x02,0x42,0x42,0x3C,0x00,0x00,
    0x00,0x00,0x00,0x00,0x04,0x0C,0x14,0x24,0x44,0x44,0x7E,0x04,0x04,0x04,0x00,0x00,
    0x00,0x00,0x00,0x00,0x7E,0x40,0x40,0x40,0x7C,0x02,0x02,0x02,0x42,0x3C,0x00,0x00,
    0x00,0x00,0x00,0x00,0x1C,0x20,0x40,0x40,0x7C,0x42,0x42,0x42,0x42,0x3C,0x00,0x00,
    0x00,0x00,0x00,0x00,0x7E,0x02,0x02,0x04,0x04,0x04,0x08,0x08,0x08,0x08,0x00,0x00,
    0x00,0x00,0x00,0x00,0x3C,0x42,0x42,0x42,0x3C,0x42,0x42,0x42,0x42,0x3C,0x00,0x00,
    0x00,0x00,0x00,0x00,0x3C,0x42,0x42,0x42,0x3E,0x02,0x02,0x02,0x04,0x38,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x18,0x00,0x00,0x00,0x18,0x18,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x18,0x00,0x00,0x00,0x18,0x08,0x08,0x10,0x00,
    0x00,0x00,0x00,0x00,0x00,0x02,0x04,0x08,0x10,0x20,0x10,0x08,0x04,0x02,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7E,0x00,0x00,0x00,0x7E,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x40,0x20,0x10,0x08,0x04,0x08,0x10,0x20,0x40,0x00,0x00,
    0x00,0x00,0x00,0x00,0x3C,0x42,0x42,0x02,0x04,0x08,0x08,0x00,0x08,0x08,0x00,0x00,
    0x00,0x00,0x00,0x00,0x1C,0x22,0x4A,0x56,0x52,0x52,0x52,0x4E,0x20,0x1E,0x00,0x00,
    0x00,0x00,0x00,0x00,0x18,0x24,0x24,0x42,0x42,0x7E,0x42,0x42,0x42,0x42,0x00,0x00,
    0x00,0x00,0x00,0x00,0x7C,0x42,0x42,0x42,0x7C,0x42,0x42,0x42,0x42,0x7C,0x00,0x00,
    0x00,0x00,0x00,0x00,0x3C,0x42,0x42,0x40,0x40,0x40,0x40,0x42,0x42,0x3C,0x00,0x00,
    0x00,0x00,0x00,0x00,0x78,0x44,0x42,0x42,0x42,0x42,0x42,0x42,0x44,0x78,0x00,0x00,
    0x00,0x00,0x00,0x00,0x7E,0x40,0x40,0x40,0x7C,0x40,0x40,0x40,0x40,0x7E,0x00,0x00,
    0x00,0x00,0x00,0x00,0x7E,0x40,0x40,0x40,0x7C,0x40,0x40,0x40,0x40,0x40,0x00,0x00,
    0x00,0x00,0x00,0x00,0x3C,0x42,0x42,0x40,0x40,0x4E,0x42,0x42,0x46,0x3A,0x00,0x00,
    0x00,0x00,0x00,0x00,0x42,0x42,0x42,0x42,0x7E,0x42,0x42,0x42,0x42,0x42,0x00,0x00,
    0x00,0x00,0x00,0x00,0x3E,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x3E,0x00,0x00,
    0x00,0x00,0x00,0x00,0x1F,0x04,0x04,0x04,0x04,0x04,0x04,0x44,0x44,0x38,0x00,0x00,
    0x00,0x00,0x00,0x00,0x42,0x44,0x48,0x50,0x60,0x60,0x50,0x48,0x44,0x42,0x00,0x00,
    0x00,0x00,0x00,0x00,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x7E,0x00,0x00,
    0x00,0x00,0x00,0x00,0x42,0x42,0x66,0x66,0x5A,0x5A,0x42,0x42,0x42,0x42,0x00,0x00,
    0x00,0x00,0x00,0x00,0x42,0x62,0x62,0x52,0x52,0x4A,0x4A,0x46,0x46,0x42,0x00,0x00,
    0x00,0x00,0x00,0x00,0x3C,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x3C,0x00,0x00,
    0x00,0x00,0x00,0x00,0x7C,0x42,0x42,0x42,0x7C,0x40,0x40,0x40,0x40,0x40,0x00,0x00,
    0x00,0x00,0x00,0x00,0x3C,0x42,0x42,0x42,0x42,0x42,0x42,0x5A,0x66,0x3C,0x03,0x00,
    0x00,0x00,0x00,0x00,0x7C,0x42,0x42,0x42,0x7C,0x48,0x44,0x44,0x42,0x42,0x00,0x00,
    0x00,0x00,0x00,0x00,0x3C,0x42,0x42,0x40,0x30,0x0C,0x02,0x42,0x42,0x3C,0x00,0x00,
    0x00,0x00,0x00,0x00,0x7F,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x00,0x00,
    0x00,0x00,0x00,0x00,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x3C,0x00,0x00,
    0x00,0x00,0x00,0x00,0x41,0x41,0x41,0x22,0x22,0x22,0x14,0x14,0x08,0x08,0x00,0x00,
    0x00,0x00,0x00,0x00,0x42,0x42,0x42,0x42,0x5A,0x5A,0x66,0x66,0x42,0x42,0x00,0x00,
    0x00,0x00,0x00,0x00,0x42,0x42,0x24,0x24,0x18,0x18,0x24,0x24,0x42,0x42,0x00,0x00,
    0x00,0x00,0x00,0x00,0x41,0x41,0x22,0x22,0x14,0x08,0x08,0x08,0x08,0x08,0x00,0x00,
    0x00,0x00,0x00,0x00,0x7E,0x02,0x02,0x04,0x08,0x10,0x20,0x40,0x40,0x7E,0x00,0x00,
    0x00,0x00,0x00,0x0E,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x0E,0x00,
    0x00,0x00,0x00,0x00,0x40,0x40,0x20,0x10,0x10,0x08,0x08,0x04,0x02,0x02,0x00,0x00,
    0x00,0x00,0x00,0x70,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x70,0x00,
    0x00,0x00,0x18,0x24,0x42,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0x00,
    0x00,0x20,0x10,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x3C,0x42,0x02,0x3E,0x42,0x42,0x46,0x3A,0x00,0x00,
    0x00,0x00,0x00,0x40,0x40,0x40,0x5C,0x62,0x42,0x42,0x42,0x42,0x62,0x5C,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x3C,0x42,0x40,0x40,0x40,0x40,0x42,0x3C,0x00,0x00,
    0x00,0x00,0x00,0x02,0x02,0x02,0x3A,0x46,0x42,0x42,0x42,0x42,0x46,0x3A,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x3C,0x42,0x42,0x7E,0x40,0x40,0x42,0x3C,0x00,0x00,
    0x00,0x00,0x00,0x0C,0x10,0x10,0x10,0x7C,0x10,0x10,0x10,0x10,0x10,0x10,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x02,0x3A,0x44,0x44,0x44,0x38,0x20,0x3C,0x42,0x42,0x3C,
    0x00,0x00,0x00,0x40,0x40,0x40,0x5C,0x62,0x42,0x42,0x42,0x42,0x42,0x42,0x00,0x00,
    0x00,0x00,0x00,0x08,0x08,0x00,0x18,0x08,0x08,0x08,0x08,0x08,0x08,0x3E,0x00,0x00,
    0x00,0x00,0x00,0x04,0x04,0x00,0x0C,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x48,0x30,
    0x00,0x00,0x00,0x00,0x40,0x40,0x44,0x48,0x50,0x60,0x50,0x48,0x44,0x42,0x00,0x00,
    0x00,0x00,0x00,0x00,0x18,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x3E,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x76,0x49,0x49,0x49,0x49,0x49,0x49,0x49,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x5C,0x62,0x42,0x42,0x42,0x42,0x42,0x42,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x3C,0x42,0x42,0x42,0x42,0x42,0x42,0x3C,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x5C,0x62,0x42,0x42,0x42,0x42,0x62,0x5C,0x40,0x40,
    0x00,0x00,0x00,0x00,0x00,0x00,0x3A,0x46,0x42,0x42,0x42,0x42,0x46,0x3A,0x02,0x02,
    0x00,0x00,0x00,0x00,0x00,0x00,0x5C,0x62,0x42,0x40,0x40,0x40,0x40,0x40,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x3C,0x42,0x40,0x30,0x0C,0x02,0x42,0x3C,0x00,0x00,
    0x00,0x00,0x00,0x00,0x10,0x10,0x7C,0x10,0x10,0x10,0x10,0x10,0x10,0x0C,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x42,0x42,0x42,0x42,0x42,0x42,0x46,0x3A,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x42,0x42,0x42,0x24,0x24,0x24,0x18,0x18,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x41,0x49,0x49,0x49,0x49,0x49,0x49,0x36,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x42,0x42,0x24,0x18,0x18,0x24,0x42,0x42,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x42,0x42,0x42,0x42,0x42,0x26,0x1A,0x02,0x02,0x3C,
    0x00,0x00,0x00,0x00,0x00,0x00,0x7E,0x02,0x04,0x08,0x10,0x20,0x40,0x7E,0x00,0x00,
    0x00,0x00,0x00,0x0C,0x10,0x10,0x08,0x08,0x10,0x10,0x08,0x08,0x10,0x10,0x0C,0x00,
    0x00,0x00,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,
    0x00,0x00,0x00,0x30,0x08,0x08,0x10,0x10,0x08,0x08,0x10,0x10,0x08,0x08,0x30,0x00,
    0x00,0x00,0x00,0x31,0x49,0x46,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x08,0x08,0x00,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x00,0x00,
    0x00,0x00,0x00,0x00,0x08,0x08,0x3E,0x49,0x48,0x48,0x49,0x3E,0x08,0x08,0x00,0x00,
    0x00,0x00,0x00,0x00,0x0E,0x10,0x10,0x10,0x7C,0x10,0x10,0x10,0x3E,0x61,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x42,0x24,0x3C,0x24,0x24,0x3C,0x24,0x42,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x41,0x22,0x14,0x08,0x7F,0x08,0x7F,0x08,0x08,0x08,0x00,0x00,
    0x00,0x00,0x00,0x00,0x08,0x08,0x08,0x08,0x00,0x00,0x08,0x08,0x08,0x08,0x00,0x00,
    0x00,0x00,0x00,0x00,0x3C,0x42,0x40,0x3C,0x42,0x42,0x3C,0x02,0x42,0x3C,0x00,0x00,
    0x24,0x24,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x3C,0x42,0x99,0xA5,0xA1,0xA1,0xA5,0x99,0x42,0x3C,0x00,0x00,
    0x00,0x00,0x1C,0x02,0x1E,0x22,0x1E,0x00,0x3E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x12,0x12,0x24,0x24,0x48,0x24,0x24,0x12,0x12,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7E,0x02,0x02,0x02,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7E,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x3C,0x42,0xB9,0xA5,0xA5,0xB9,0xA9,0xA5,0x42,0x3C,0x00,0x00,
    0x00,0x00,0x7E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x10,0x28,0x28,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x08,0x08,0x08,0x7F,0x08,0x08,0x08,0x00,0x7F,0x00,0x00,0x00,
    0x00,0x00,0x1C,0x22,0x02,0x1C,0x20,0x20,0x3E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x1C,0x22,0x02,0x1C,0x02,0x22,0x1C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x04,0x08,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x22,0x22,0x22,0x22,0x36,0x2A,0x20,0x20,
    0x00,0x00,0x00,0x3E,0x7A,0x7A,0x7A,0x7A,0x3A,0x0A,0x0A,0x0A,0x0A,0x0A,0x0E,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x18,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x30,
    0x00,0x00,0x08,0x18,0x28,0x08,0x08,0x08,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x1C,0x22,0x22,0x22,0x1C,0x00,0x3E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x48,0x48,0x24,0x24,0x12,0x24,0x24,0x48,0x48,0x00,0x00,
    0x00,0x00,0x00,0x00,0x22,0x62,0x24,0x28,0x28,0x12,0x16,0x2A,0x4E,0x42,0x00,0x00,
    0x00,0x00,0x00,0x00,0x22,0x62,0x24,0x28,0x28,0x14,0x1A,0x22,0x44,0x4E,0x00,0x00,
    0x00,0x00,0x00,0x00,0x62,0x12,0x24,0x18,0x68,0x12,0x16,0x2A,0x4E,0x42,0x00,0x00,
    0x00,0x00,0x00,0x00,0x08,0x08,0x00,0x08,0x08,0x30,0x42,0x42,0x42,0x3C,0x00,0x00,
    0x30,0x0C,0x00,0x00,0x18,0x24,0x24,0x42,0x42,0x7E,0x42,0x42,0x42,0x42,0x00,0x00,
    0x0C,0x30,0x00,0x00,0x18,0x24,0x24,0x42,0x42,0x7E,0x42,0x42,0x42,0x42,0x00,0x00,
    0x18,0x24,0x00,0x00,0x18,0x24,0x24,0x42,0x42,0x7E,0x42,0x42,0x42,0x42,0x00,0x00,
    0x32,0x4C,0x00,0x00,0x18,0x24,0x24,0x42,0x42,0x7E,0x42,0x42,0x42,0x42,0x00,0x00,
    0x24,0x24,0x00,0x00,0x18,0x24,0x24,0x42,0x42,0x7E,0x42,0x42,0x42,0x42,0x00,0x00,
    0x18,0x24,0x18,0x00,0x18,0x24,0x24,0x42,0x42,0x7E,0x42,0x42,0x42,0x42,0x00,0x00,
    0x00,0x00,0x00,0x00,0x1F,0x28,0x48,0x48,0x7F,0x48,0x48,0x48,0x48,0x4F,0x00,0x00,
    0x00,0x00,0x00,0x00,0x3C,0x42,0x42,0x40,0x40,0x40,0x40,0x42,0x42,0x3C,0x08,0x30,
    0x30,0x0C,0x00,0x00,0x7E,0x40,0x40,0x40,0x7C,0x40,0x40,0x40,0x40,0x7E,0x00,0x00,
    0x0C,0x30,0x00,0x00,0x7E,0x40,0x40,0x40,0x7C,0x40,0x40,0x40,0x40,0x7E,0x00,0x00,
    0x18,0x24,0x00,0x00,0x7E,0x40,0x40,0x40,0x7C,0x40,0x40,0x40,0x40,0x7E,0x00,0x00,
    0x24,0x24,0x00,0x00,0x7E,0x40,0x40,0x40,0x7C,0x40,0x40,0x40,0x40,0x7E,0x00,0x00,
    0x18,0x06,0x00,0x00,0x3E,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x3E,0x00,0x00,
    0x0C,0x30,0x00,0x00,0x3E,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x3E,0x00,0x00,
    0x18,0x24,0x00,0x00,0x3E,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x3E,0x00,0x00,
    0x24,0x24,0x00,0x00,0x3E,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x3E,0x00,0x00,
    0x00,0x00,0x00,0x00,0x78,0x44,0x42,0x42,0xF2,0x42,0x42,0x42,0x44,0x78,0x00,0x00,
    0x32,0x4C,0x00,0x00,0x42,0x62,0x62,0x52,0x52,0x4A,0x4A,0x46,0x46,0x42,0x00,0x00,
    0x30,0x0C,0x00,0x00,0x3C,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x3C,0x00,0x00,
    0x0C,0x30,0x00,0x00,0x3C,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x3C,0x00,0x00,
    0x18,0x24,0x00,0x00,0x3C,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x3C,0x00,0x00,
    0x32,0x4C,0x00,0x00,0x3C,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x3C,0x00,0x00,
    0x24,0x24,0x00,0x00,0x3C,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x3C,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x42,0x24,0x18,0x24,0x42,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x02,0x3A,0x44,0x46,0x4A,0x4A,0x52,0x52,0x62,0x22,0x5C,0x40,0x00,
    0x30,0x0C,0x00,0x00,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x3C,0x00,0x00,
    0x0C,0x30,0x00,0x00,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x3C,0x00,0x00,
    0x18,0x24,0x00,0x00,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x3C,0x00,0x00,
    0x24,0x24,0x00,0x00,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x3C,0x00,0x00,
    0x0C,0x30,0x00,0x00,0x41,0x41,0x22,0x22,0x14,0x08,0x08,0x08,0x08,0x08,0x00,0x00,
    0x00,0x00,0x00,0x40,0x40,0x78,0x44,0x42,0x42,0x44,0x78,0x40,0x40,0x40,0x00,0x00,
    0x00,0x00,0x00,0x00,0x38,0x44,0x44,0x44,0x7C,0x42,0x42,0x42,0x62,0x5C,0x00,0x00,
    0x00,0x00,0x30,0x0C,0x00,0x00,0x3C,0x42,0x02,0x3E,0x42,0x42,0x46,0x3A,0x00,0x00,
    0x00,0x00,0x0C,0x30,0x00,0x00,0x3C,0x42,0x02,0x3E,0x42,0x42,0x46,0x3A,0x00,0x00,
    0x00,0x00,0x18,0x24,0x00,0x00,0x3C,0x42,0x02,0x3E,0x42,0x42,0x46,0x3A,0x00,0x00,
    0x00,0x00,0x32,0x4C,0x00,0x00,0x3C,0x42,0x02,0x3E,0x42,0x42,0x46,0x3A,0x00,0x00,
    0x00,0x00,0x24,0x24,0x00,0x00,0x3C,0x42,0x02,0x3E,0x42,0x42,0x46,0x3A,0x00,0x00,
    0x00,0x18,0x24,0x18,0x00,0x00,0x3C,0x42,0x02,0x3E,0x42,0x42,0x46,0x3A,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x3E,0x49,0x09,0x3F,0x48,0x48,0x49,0x3E,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x3C,0x42,0x40,0x40,0x40,0x40,0x42,0x3C,0x08,0x30,
    0x00,0x00,0x30,0x0C,0x00,0x00,0x3C,0x42,0x42,0x7E,0x40,0x40,0x42,0x3C,0x00,0x00,
    0x00,0x00,0x0C,0x30,0x00,0x00,0x3C,0x42,0x42,0x7E,0x40,0x40,0x42,0x3C,0x00,0x00,
    0x00,0x00,0x18,0x24,0x00,0x00,0x3C,0x42,0x42,0x7E,0x40,0x40,0x42,0x3C,0x00,0x00,
    0x00,0x00,0x24,0x24,0x00,0x00,0x3C,0x42,0x42,0x7E,0x40,0x40,0x42,0x3C,0x00,0x00,
    0x00,0x00,0x30,0x0C,0x00,0x00,0x18,0x08,0x08,0x08,0x08,0x08,0x08,0x3E,0x00,0x00,
    0x00,0x00,0x0C,0x30,0x00,0x00,0x18,0x08,0x08,0x08,0x08,0x08,0x08,0x3E,0x00,0x00,
    0x00,0x00,0x18,0x24,0x00,0x00,0x18,0x08,0x08,0x08,0x08,0x08,0x08,0x3E,0x00,0x00,
    0x00,0x00,0x24,0x24,0x00,0x00,0x18,0x08,0x08,0x08,0x08,0x08,0x08,0x3E,0x00,0x00,
    0x00,0x00,0x32,0x0C,0x14,0x22,0x02,0x3E,0x42,0x42,0x42,0x42,0x42,0x3C,0x00,0x00,
    0x00,0x00,0x32,0x4C,0x00,0x00,0x5C,0x62,0x42,0x42,0x42,0x42,0x42,0x42,0x00,0x00,
    0x00,0x00,0x30,0x0C,0x00,0x00,0x3C,0x42,0x42,0x42,0x42,0x42,0x42,0x3C,0x00,0x00,
    0x00,0x00,0x0C,0x30,0x00,0x00,0x3C,0x42,0x42,0x42,0x42,0x42,0x42,0x3C,0x00,0x00,
    0x00,0x00,0x18,0x24,0x00,0x00,0x3C,0x42,0x42,0x42,0x42,0x42,0x42,0x3C,0x00,0x00,
    0x00,0x00,0x32,0x4C,0x00,0x00,0x3C,0x42,0x42,0x42,0x42,0x42,0x42,0x3C,0x00,0x00,
    0x00,0x00,0x24,0x24,0x00,0x00,0x3C,0x42,0x42,0x42,0x42,0x42,0x42,0x3C,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x00,0x00,0x7E,0x00,0x00,0x18,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x02,0x3C,0x46,0x4A,0x4A,0x52,0x52,0x62,0x3C,0x40,0x00,
    0x00,0x00,0x30,0x0C,0x00,0x00,0x42,0x42,0x42,0x42,0x42,0x42,0x46,0x3A,0x00,0x00,
    0x00,0x00,0x0C,0x30,0x00,0x00,0x42,0x42,0x42,0x42,0x42,0x42,0x46,0x3A,0x00,0x00,
    0x00,0x00,0x18,0x24,0x00,0x00,0x42,0x42,0x42,0x42,0x42,0x42,0x46,0x3A,0x00,0x00,
    0x00,0x00,0x24,0x24,0x00,0x00,0x42,0x42,0x42,0x42,0x42,0x42,0x46,0x3A,0x00,0x00,
    0x00,0x00,0x0C,0x30,0x00,0x00,0x42,0x42,0x42,0x42,0x42,0x26,0x1A,0x02,0x02,0x3C,
    0x00,0x00,0x00,0x00,0x20,0x20,0x3C,0x22,0x22,0x22,0x24,0x28,0x30,0x20,0x20,0x20,
    0x00,0x00,0x24,0x24,0x00,0x00,0x42,0x42,0x42,0x42,0x42,0x26,0x1A,0x02,0x02,0x3C,
};


// Simple text drawing function. Target surface must be 32-bit.
void drawString(const char *aTest, SDL_Surface *aTarget, int aX, int aY, unsigned int aColor)
{
    if (SDL_MUSTLOCK(aTarget))
    {
        if (SDL_LockSurface(aTarget) < 0)
            return;
    }

    int x = aX;
    int y = aY;

    unsigned int *pixels = (unsigned int *)aTarget->pixels;
    unsigned int pitch = (unsigned int)aTarget->pitch/4;

    const char *in = aTest;
    while(*in != '\0')
    {
        unsigned int c = (unsigned int)*in;
        if (c <= 0x20 || (c >= 0x7f && c <= 0xa0))
        {
            if (c == ' ')
            {
                x += 8;
            }
            if (c == 0xa)
            {
                y += 16;
                x = aX;
            }
        }
        else
        {
            if (c > 0xa0)
                c -= 0x43;
            else
                c -= 0x21;

            const unsigned char *glyphData = &gFontData[c*16];

            int cy;
            for (cy = 0; cy < 16; cy++)
            {
                unsigned char mask = 0x80;
                int cx;
                for (cx = 0; cx < 8; cx++)
                {
                    if (mask & glyphData[cy])
                    {
                        int yp = y + cy;
                        int xp = x + cx;
                        if (xp > 0 && xp < aTarget->w &&
                            yp > 0 && yp < aTarget->h)
                        {
                            pixels[yp * pitch + xp] = aColor;
                        }
                    }
                    mask >>= 1;
                }
            }

            x += 8;
        }

        in++;
    }

    if (SDL_MUSTLOCK(aTarget))
    {
        SDL_UnlockSurface(aTarget);
    }
}

#ifdef GATHER_STATISTICS

#define MAX_STATISTICS_COLLECTION_SIZE 30

class PolygonStatisticsCollection : public PolygonConstructionStatisticsListener
{
public:
    //! Constructor.
    PolygonStatisticsCollection()
    {
        mConstructionCount = 0;
        mRasterizationCount = 0;
        mNameCount = 0;
        int n;
        for (n = 0; n < MAX_STATISTICS_COLLECTION_SIZE; n++)
            mGraphicNames[n] = NULL;
    }

    //! Destructor.
    virtual ~PolygonStatisticsCollection()
    {
        int n;
        for (n = 0; n < mNameCount; n++)
        {
            delete[] mGraphicNames[n];
        }
    }

    //! Callback that stores the construction statistics.
    virtual void update(const PolygonConstructionStatistics &aStatistics)
    {
        if (mConstructionCount < MAX_STATISTICS_COLLECTION_SIZE)
            mConstructionStatistics[mConstructionCount++] = aStatistics;
    }

    //! Adds the rasterization statistics.
    void update(const PolygonRasterizationStatistics &aStatistics)
    {
        if (mRasterizationCount < MAX_STATISTICS_COLLECTION_SIZE)
            mRasterizationStatistics[mRasterizationCount++] = aStatistics;
    }

    //! Adds a name.
    void update(const char *aGraphicName)
    {
        if (mNameCount < MAX_STATISTICS_COLLECTION_SIZE)
            mGraphicNames[mNameCount++] = strdup(aGraphicName);
    }

    //! Saves the statistics to a file.
    bool save(const char *aFileName)
    {
        FILE *fp = fopen(aFileName,"w");
        if (fp == NULL)
            return false;

        // image                polygon     subpolygon  edge        total       average     filled      edge        overdraw    individual  overdraw
        // name                 count       count       count       edge length edge length pixels      pixels      pixels      pixels      ratio
        //  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |

        fprintf(fp,"image                 polygon     subpolygon  edge        total       average     filled      edge        overdraw    individual  overdraw\n"\
                   "name                  count       count       count       edge length edge length pixels      pixels      pixels      pixels      ratio\n");

        int n;
        int maxCount = mConstructionCount > mRasterizationCount ? mConstructionCount : mRasterizationCount;
        for (n = 0; n < maxCount; n++)
        {
            if (mGraphicNames[n])
                fprintf(fp,mGraphicNames[n]);
            else
                fprintf(fp,"N/A                  ");

            int individualPixels = mRasterizationStatistics[n].mFilledPixels +
                                   mRasterizationStatistics[n].mAntialiasPixels -
                                   mRasterizationStatistics[n].mOverdrawPixels;
            double overdrawRatio = (double)(mRasterizationStatistics[n].mFilledPixels +
                                            mRasterizationStatistics[n].mAntialiasPixels) /
                                   (double)individualPixels;

            fprintf(fp," %-12d%-12d%-12d%-12.4f%-12.4f%-12d%-12d%-12d%-12d%-12.4f\n",
                       mConstructionStatistics[n].mPolygonCount,
                       mConstructionStatistics[n].mSubPolygonCount,
                       mConstructionStatistics[n].mEdgeCount,
                       GLOBAL_SCALE * mConstructionStatistics[n].mEdgeLength,
                       GLOBAL_SCALE * mConstructionStatistics[n].mEdgeLength / (double)mConstructionStatistics[n].mEdgeCount,
                       mRasterizationStatistics[n].mFilledPixels,
                       mRasterizationStatistics[n].mAntialiasPixels,
                       mRasterizationStatistics[n].mOverdrawPixels,
                       individualPixels,
                       overdrawRatio);
        }

        return true;
    }

protected:
    PolygonConstructionStatistics mConstructionStatistics[MAX_STATISTICS_COLLECTION_SIZE];    
    PolygonRasterizationStatistics mRasterizationStatistics[MAX_STATISTICS_COLLECTION_SIZE];
    char *mGraphicNames[MAX_STATISTICS_COLLECTION_SIZE];
    int mConstructionCount;
    int mRasterizationCount;
    int mNameCount;
};
#endif

//! Called to initialize the application.
int main( int argc, char* argv[] )
{
    TestApp app;
    if (!app.init())
        return(1);
    
    app.run();

    app.deinit();

    return(0);
}


//! Constructor.
TestApp::TestApp()
{
    mPolygonTester = NULL;
#ifdef GATHER_STATISTICS
    mStatistics = NULL;
#endif
}


//! Destructor.
TestApp::~TestApp()
{
    delete mPolygonTester;
#ifdef GATHER_STATISTICS
    delete mStatistics;
#endif
}


//! Called upon application init.
bool TestApp::init()
{
    if (SDL_Init(SDL_INIT_AUDIO|SDL_INIT_VIDEO) < 0)
    {
        fprintf(stderr, "Unable to init SDL: %s\n", SDL_GetError());
        return false;
    }

    mScreen = SDL_SetVideoMode(WINDOW_WIDTH, WINDOW_HEIGHT, 32, SDL_SWSURFACE);
    if ( mScreen == NULL )
    {
        fprintf(stderr, "Unable to set %dx%d video: %s\n",WINDOW_WIDTH,WINDOW_HEIGHT,SDL_GetError());
        return false;
    }

#ifdef TEST_ALL_VERSIONS
    const int fillerCount = 6;
#else
    const int fillerCount = 1;
#endif

    Renderer **fillers = new Renderer*[fillerCount];
    if (fillers == NULL)
        return false;

    fillers[0] = new PolygonVersionF();
    if (fillers[0] == NULL || !((PolygonVersionF *)fillers[0])->init(WINDOW_WIDTH, WINDOW_HEIGHT, 300000))
        return false;

#ifdef TEST_ALL_VERSIONS
    fillers[1] = new PolygonVersionE();
    if (fillers[1] == NULL || !((PolygonVersionE *)fillers[1])->init(WINDOW_WIDTH, WINDOW_HEIGHT))
        return false;

    fillers[2] = new PolygonVersionD();
    if (fillers[2] == NULL || !((PolygonVersionD *)fillers[2])->init(WINDOW_WIDTH, WINDOW_HEIGHT))
        return false;

    fillers[3] = new PolygonVersionC();
    if (fillers[3] == NULL || !((PolygonVersionC *)fillers[3])->init(WINDOW_WIDTH, WINDOW_HEIGHT))
        return false;

    fillers[4] = new PolygonVersionB();
    if (fillers[4] == NULL || !((PolygonVersionB *)fillers[4])->init(WINDOW_WIDTH, WINDOW_HEIGHT))
        return false;

    fillers[5] = new PolygonVersionA();
    if (fillers[5] == NULL || !((PolygonVersionA *)fillers[5])->init(WINDOW_WIDTH, WINDOW_HEIGHT))
        return false;
#endif

    /*
    int border = 50;
    ((PolygonVersionF *)fillers[0])->setClipRect(border,border,mWindow.mWidth-2*border,mWindow.mHeight-2*border);
    ((PolygonVersionE *)fillers[1])->setClipRect(border,border,mWindow.mWidth-2*border,mWindow.mHeight-2*border);
    ((PolygonVersionD *)fillers[2])->setClipRect(border,border,mWindow.mWidth-2*border,mWindow.mHeight-2*border);
    ((PolygonVersionC *)fillers[3])->setClipRect(border,border,mWindow.mWidth-2*border,mWindow.mHeight-2*border);
    ((PolygonVersionB *)fillers[4])->setClipRect(border,border,mWindow.mWidth-2*border,mWindow.mHeight-2*border);
    ((PolygonVersionA *)fillers[5])->setClipRect(border,border,mWindow.mWidth-2*border,mWindow.mHeight-2*border);
    */

    /*
    Renderer *t = fillers[1];
    fillers[1] = fillers[0];
    fillers[0] = t;
    */

    char **fillerNames = new char *[fillerCount];
    if (fillerNames == NULL)
        return false;

#ifndef TEST_ALL_VERSIONS
#if SUBPIXEL_COUNT == 8
    fillerNames[0] = strdup("8x antialiasing");
#endif
#if SUBPIXEL_COUNT == 16
    fillerNames[0] = strdup("16x antialiasing");
#endif
#if SUBPIXEL_COUNT == 32
    fillerNames[0] = strdup("32x antialiasing");
#endif
#else
    fillerNames[0] = strdup("filler F");
    fillerNames[1] = strdup("filler E");
    fillerNames[2] = strdup("filler D");
    fillerNames[3] = strdup("filler C");
    fillerNames[4] = strdup("filler B");
    fillerNames[5] = strdup("filler A");
#endif

    int n;
    for (n = 0; n < fillerCount; n++)
    {
        if (fillerNames[n] == NULL)
            return false;
    }

#ifdef GATHER_STATISTICS
    mStatistics = new PolygonStatisticsCollection();
    if (mStatistics == NULL)
        return false;

    DefaultPolygonFactory factory(mStatistics);
#else
    DefaultPolygonFactory factory;
#endif

#ifdef STANDARD_TEST
    mPolygonTester = TestMaker::createStandardTest(fillers,fillerNames,fillerCount,&factory,-1,SVG_PATH,CREATE_DUMPS);
#else
#ifdef QUALITY_TEST
    mPolygonTester = TestMaker::createQualityTest(fillers,fillerNames,fillerCount,&factory,SVG_PATH);
#else
#ifdef SQUARE_TEST
    mPolygonTester = TestMaker::createSquaresTest(fillers,fillerNames,fillerCount,&factory,SVG_PATH);
#else
#ifdef QT_POLYGON_TEST
    mPolygonTester = TestMaker::createQTPolygonTest(fillers,fillerNames,fillerCount,&factory);
#endif
#endif
#endif
#endif

    if (mPolygonTester == NULL)
        return false;

    mPolygonTester->setScale(GLOBAL_SCALE);

#ifdef GATHER_STATISTICS
    int vgCount = mPolygonTester->getVectorGraphicCount();
    for (n = 0; n < vgCount; n++)
        mStatistics->update(mPolygonTester->getVectorGraphicName(n));
    mPolygonTester->setIterationCount(10);
#endif

    /*
    mPolygonTester->setMovement(VECTOR2D(FLOAT_TO_RATIONAL(0.0f),FLOAT_TO_RATIONAL(0.0f)));
    mPolygonTester->setRotationSpeed(FLOAT_TO_RATIONAL(0.0f));
    */

    return true;
}


//! Called on application quit (cleanup).
void TestApp::deinit()
{
#ifdef SAVE_RESULTS
    
#if SUBPIXEL_COUNT == 8

#if GLOBAL_SCALE == 4
    const char *filename = "Scanline Edge-Flag 8x Test Results 1280x960.txt";
    const char *statisticsFilename = "Scanline Edge-Flag 8x Statistics 1280x960.txt";
#elif GLOBAL_SCALE == 2
    const char *filename = "Scanline Edge-Flag 8x Test Results 640x480.txt";
    const char *statisticsFilename = "Scanline Edge-Flag 8x Statistics 640x480.txt";
#elif GLOBAL_SCALE == 1
    const char *filename = "Scanline Edge-Flag 8x Test Results 320x240.txt";
    const char *statisticsFilename = "Scanline Edge-Flag 8x Statistics 320x240.txt";
#else // GLOBAL_SCALE != [1,2,4]
    const char *filename = "Scanline Edge-Flag 8x Test Results.txt";
    const char *statisticsFilename = "Scanline Edge-Flag 8x Statistics.txt";
#endif // GLOBAL_SCALE

#endif

#if SUBPIXEL_COUNT == 16

#if GLOBAL_SCALE == 4
    const char *filename = "Scanline Edge-Flag 16x Test Results 1280x960.txt";
    const char *statisticsFilename = "Scanline Edge-Flag 16x Statistics 1280x960.txt";
#elif GLOBAL_SCALE == 2
    const char *filename = "Scanline Edge-Flag 16x Test Results 640x480.txt";
    const char *statisticsFilename = "Scanline Edge-Flag 16x Statistics 640x480.txt";
#elif GLOBAL_SCALE == 1
    const char *filename = "Scanline Edge-Flag 16x Test Results 320x240.txt";
    const char *statisticsFilename = "Scanline Edge-Flag 16x Statistics 320x240.txt";
#else // GLOBAL_SCALE != [1,2,4]
    const char *filename = "Scanline Edge-Flag 16x Test Results.txt";
    const char *statisticsFilename = "Scanline Edge-Flag 16x Statistics.txt";
#endif // GLOBAL_SCALE

#endif

#if SUBPIXEL_COUNT == 32

#if GLOBAL_SCALE == 4
    const char *filename = "Scanline Edge-Flag 32x Test Results 1280x960.txt";
    const char *statisticsFilename = "Scanline Edge-Flag 8x Statistics 1280x960.txt";
#elif GLOBAL_SCALE == 2
    const char *filename = "Scanline Edge-Flag 32x Test Results 640x480.txt";
    const char *statisticsFilename = "Scanline Edge-Flag 8x Statistics 640x480.txt";
#elif GLOBAL_SCALE == 1
    const char *filename = "Scanline Edge-Flag 32x Test Results 320x240.txt";
    const char *statisticsFilename = "Scanline Edge-Flag 8x Statistics 320x240.txt";
#else // GLOBAL_SCALE != [1,2,4]
    const char *filename = "Scanline Edge-Flag 32x Test Results.txt";
    const char *statisticsFilename = "Scanline Edge-Flag 8x Statistics.txt";
#endif // GLOBAL_SCALE

#endif

    mPolygonTester->saveResults(filename);
#ifdef GATHER_STATISTICS
    mStatistics->save(statisticsFilename);
#endif

#endif
}


//! Implements the application loop.
void TestApp::run()
{
    while (update())
    {
        SDL_Event event;
        
        while ( SDL_PollEvent(&event) )
        {
            switch (event.type)
            {
                case SDL_KEYDOWN:
                    break;
                case SDL_MOUSEMOTION:                    
                    break;
                case SDL_MOUSEBUTTONDOWN:
                case SDL_QUIT:
                    return;
            }
        }
    }
}


//! Called every time in the rendering loop.
bool TestApp::update()
{
    int testCount = mPolygonTester->getTestCount();

    // if (testCount >= 30)
    //     return false;

    SDL_Rect r;
    r.x = 0;
    r.y = 0;
    r.w = WINDOW_WIDTH;
    r.h = WINDOW_HEIGHT;
#ifdef GATHER_STATISTICS
    ((PolygonFiller *)(mPolygonTester->getFiller(testCount)))->resetStatistics();
    SDL_FillRect(mScreen,&r,STATISTICS_BG_COLOR);
#else
    SDL_FillRect(mScreen,&r,0xffffff);
#endif

    bool ok = true;
    if (SDL_MUSTLOCK(mScreen))
    {
        if (SDL_LockSurface(mScreen) < 0)
            ok = false;
    }

    if (ok)
    {
        unsigned long *data = (unsigned long *)(mScreen->pixels);
        int pitch = mScreen->pitch;

        BitmapData bitmap(mScreen->w, mScreen->h,
                          pitch, data, BitmapData::BITMAP_FORMAT_XRGB);
        mPolygonTester->runTest(&bitmap);

        int newCount = mPolygonTester->getTestCount();
        if (testCount != newCount)
        {
#ifdef SAVE_BITMAPS
            // The count has changed -> this is the first frame of a new test.
            char buffer[32];
            sprintf(buffer,"Test%03d.bmp",testCount);
            SDL_SaveBMP(mScreen,buffer);
#endif
#ifdef GATHER_STATISTICS
            const PolygonRasterizationStatistics &statistics =
                      ((PolygonFiller *)(mPolygonTester->getFiller(testCount)))->getStatistics();
            mStatistics->update(statistics);
#endif
        }
    }

    if (ok && SDL_MUSTLOCK(mScreen))
    {
        SDL_UnlockSurface(mScreen);
    }

    char buffer[100];
    int count = mPolygonTester->getTestCount();

    int yOffset = 0;
    int maxY = 16*count;
    if (maxY > WINDOW_HEIGHT)
        yOffset = WINDOW_HEIGHT - maxY;

    int n;
    for (n = 0; n < count; n++)
    {
        float ftime = (float)mPolygonTester->getTiming(n) / (float)(mPolygonTester->getCount(n) * 1000);
        const char *fillerName = mPolygonTester->getFillerName(n);
        const char *vgName = mPolygonTester->getVectorGraphicName(n);
        sprintf(buffer,"%s: %s %f ms",fillerName,vgName,ftime);
        // printer.print(NULL,5,yOffset + 16*n,buffer);
        drawString(buffer, mScreen, 5, yOffset + 16*n, 0xff0000);
    }

    SDL_UpdateRect(mScreen,0,0,0,0);

    return true;
}
